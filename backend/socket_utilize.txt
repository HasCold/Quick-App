. Socket.io is a web-socket library
. It is a full-duplex realtime bi-directional communication protocol.
. "io" is the circuit which is in the server. It has many sockets through which client can communicate.

. "socket" when used in the frontend side it means we are refering to the individual user.
. "io" when used in the server side it means we are talking about the whole circuit and we are emitting the event in whole circuit so the event could reach to everyone through sockets.

NOTE :- Every socket has its own ID;

 Pre-Built Event :- connection , disconnect

 Event Trigger Mehtod :- emit
 Event Listener :- on 


Example :- 

From Server Side :- 
    io.emit(event1, "Hi");
    
    socket.on(btn, (m) => {  // listen from the client side event
        console.log(m)
    })

    socket.broadcast.emit(...)  // Leaves that socket who generate the event and sent it all

On Client Side :-
    socket.on(event1, (data) => {
    console.log(data);
});

socket.emit(btn, 4);


Room Space for particular single chat to the user :- 

to() -->> To trigger event for particular room.

    Person A (userId: 1) ---->> Person B (userId: 2)

    socket.to(2).emit()



Room Space for particular group chat of users :-

join() -->> To join people.

socket.join(room_name)


------------------------------ Backend Code ------------------------------------

io.on("connection", (socket) => {   // Individual socket
    console.log("User connected");
    console.log("id :-", socket.id);   // every socket has an id

    socket.emit("welcome", `Welcome to the server ${socket.id}`);  // message go to the client side when listen

    socket.broadcast.emit("broadcast", `${socket.id} joined the server`);

    socket.on("message", (data) => {
        console.log(data);
        // io.emit("recieve-message", data);  // This message will send everyone and also including me
        // socket.broadcast.emit("recieve-message", data);  // This message will send everyone but except me

        // io.to(data.room).emit("single-message", data);  // This message will send the specific room user
        // OR both will work as same io.to() / socket.to()
        socket.to(data.room).emit("single-message", data);  // This message will send the specific room user
    })

    socket.on("join-room", (room) => {
        socket.join(room);
        console.log("User joined the room", room)
    })

    socket.on("disconnect", () => {
        console.log(`${socket.id} is disconnected`);
    })

});
 